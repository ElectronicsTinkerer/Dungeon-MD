$ This is an example Dungeon-Markdown document
$ All lines that start with a '$' are comments
$ It is preferable to keep all lines to fewer than 120 characters in length.
$ Also, note the filename's naming system. The coordinates of the Room are at the beginning,
$ each axis separated by a '.' followed by a description completed with the '.dmd' extension.

$ This indicates the coordinate that this particular 'room' is located
$ The Z axis starts at 0 for sea-level; positive is above sea-level and negative is below.
$ There is not practical limitation on the value of these numbers, aside from the hard limit
$ defined by Java's INT_MAX_VALUE and INT_MIN_VALUE
$ Also, this is an optional field since it is specified in the filename. In the event that this
$ differs, the filename takes precedence, but a warning should be sent to the program's event log.
$ FORMAT: @ X.Y.Z
@ 9.6.10

$ Next is the name of the 'biome' that the Room is located within.
$ This is useful for keeping track of various spells, objects, creatures, or other elements
$ of the game. There is no requirement for this to be implemented or used, but is recommended.
# Woodlands

$ This indicates the Room's 'title'.
$ Once again, this is useful for keeping track of elements such as a story line, but is
$ otherwise not required for implementation. (But still recommended)
## Stone Ruins Entrance

$ This is where some (more) of the Markdown-relatedness breaks down:
$ To specify the description / text that the Player is given in addition to the text that
$ is auto generated by the program for each of the objects, start a line with '###'.
$ The description text then is enclosed in brackets '{}' and any whitespace characters
$ are ignored at the beginning of each line when the document is read by the program.
$ (Whitespace at the end of a line is counted as part of the line - including CR/LF characters)
$ It is recommended that within the brackets, all lines do not exceed 80 columns in width.
$ The brackets must be put on separate lines as below.
$ Single line descriptions still require the brackets enclosing the text.
### {
    The once worn-down stone path that leads to the small door is now overgrown
    by thickets, but some stones are still visible.
}

$ To specify where Creatures, Objects, Passages, or other elements of the game are located
$ within a room, use the '/' operator followed by the position in the Room. (Also, the
$ same formatting recommendations/requirements as the '###' description block apply here)
$ So, if I were to place a 'burnt_out_torch' on the north side of this Room, I would use:
/north {
    - burnt_out_torch
}

$ In the event that a particular Object or other element that is added to the room needs
$ to have special data or other attributes, it can be specified using brackets after the
$ Object. These traits can be added in layers, so in the example below, I could specify
$ more information about the small stone in the same manner that I specify the contents
$ of the table. So If I had a table in the Room with a small stone and an apple on its
$ top, I would use:
/west {
    - table {
        - stone_small
        - apple
    }
}

$ Each Object or other element should have default values for any data attributes that
$ can be specified. In the example above on the north wall, the 'burnt_out_torch' might
$ default to a temperature of cool. If I want to make it hot, like it had just gone
$ out I can specify that (I am using a different wall since each wall/section of the Room
$ should not be specified more than once.) If I want two torches, I can do that, just add
$ another entry for each element to be added.
/center {
    - burnt_out_torch {
        temp: hot
    }
    - burnt_out_torch {
        temp: warm
    }
}

$ Let's say that you want to add a door. (That seems like a fairly sensible thing to do
$ considering that this is for dungeons :) This is another object: just add it like normal.
$ For example, I want to add a wooden_door to the east side of the Room as well as an
$ invisible and locked wooden_door to the same section. To do this, I call upon the door's
$ attributes again:
/east {
    $ Comments in here also work!
    $ This is the visible door
    - wooden_door

    $ This is the invisible, locked door
    - wooden_door {
        visible: false
        locked: true
    }
}

$ As of this point in the Room document, I have not specified any element information for
$ the east or ceiling sections of the Room. This is fine since the Parser should assume
$ that there is nothing particularly important about them and that there is nothing that it
$ needs to tell the player. (But it also means that the player will be unable to move
$ through that wall, as it is assumed that it is blocked off)
